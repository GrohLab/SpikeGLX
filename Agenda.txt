// RELEASE NOTES
// ==========================

- 20151231: (release)
Function set very close to original SpikeGL. Major UI difference is disabled
fileViewerWindow (FVW) because the model of one GLGraph per channel creates
too many graphics objects. This version is effectively same as "prerelease"
versions distributed around Janelia and elsewhere.

- 20160101: (alpha)
Introduces "multi-trace" MGraph class set and a revised FVW to use, test
and develop that. MGraph is a QGLWidget (or QOpenGLWidget) that draws
unlimited numbers of traces in a vertical stack arrangement. MGraph can
be child of any QWidget, or can be used as the viewport of an MScroll
(subclasses QAbstractScrollArea) as we are in FVW. Intent is to eventually
migrate online graphing to one or more MGraphs and to retire the GraphPool.


// QT VERSIONS
// ==========================

SpikeGLX builds/runs successfully against following versions, with
noted issues. As of December 2015 all prereleases to Janelia and to
IMEC partner labs ship with 53MinGW to support XP.

- 5.3.2 MinGW482 32bit
    OpenGL:     QGLWidget
    HTML:       Renders pandoc.css properly
    Targets:    WinOS XP, 7, 8, 10
    Remarks:    - Low graph count (poor sharing).
                - Slow creation/resizing with QGLWidget requires GraphPool.
                - FileViewerWindow::initCloseLbl() issues following benign
                    warning as explained there:
                    "void QWindow::setTransientParent(QWindow*)
                     QWidgetWindow(0x431c048, name = "QWidgetClassWindow")
                     must be a top level window."

- 5.4.2 MinGW491 32bit
    OpenGL:     QGLWidget or QOpenGLWidget
    HTML:       Renders pandoc.css properly
    Targets:    WinOS XP*, 7, 8, 10
    Remarks:    - *QOpenGLWidget very fast but steps on XP Aero theme.
                - Works in XP if disallow Aero theme in Compatibility Settings.

- 5.5.1 MinGW492 32bit
    OpenGL:     QGLWidget or QOpenGLWidget
    HTML:       pandoc.css not rendering <pre><code> blocks properly**
    Targets:    WinOS XP*, 7, 8, 10
    Remarks:    - HTML CSS support degraded between version 5.4 and 5.5.
                - *QOpenGLWidget very fast but steps on XP Aero theme.
                - Works in XP if disallow Aero theme in Compatibility Settings.

- 5.6.0 Beta {MinGW492 32bit, MSVC2014 32bit, MSVC2014 64bit}
    OpenGL:     QGLWidget or QOpenGLWidget
    HTML:       pandoc.css not rendering <pre><code> blocks properly**
    Targets:    WinOS 7, 8, 10
    Remarks:    - HTML CSS support degraded between version 5.4 and 5.5.
                - XP not supported.
                - Get benign startup warning issuing before main():
                    "qt.qpa.gl: Unable to disable rotation."
                - Get warning on closing FVW (not yet resolved):
                    "External WM_DESTROY received for
                    QWidgetWindow(0x4b954c40, name="ExportDialogWindow"),
                    parent:  QWindow(0x0), transient parent:
                    QWidgetWindow(0x4b9549a0, name="FileViewerWindowClassWindow")"
                - 12/28/2015: Not yet built 64-bit against Ni-Daq.

// **
// BK: Suspicious change here:
// C:\Qt\5.3\Src\qtwebkit\Source\WebCore\rendering\...
// ...RenderBlockLineLayout.cpp::CheckMidpoints() ; line 426


// ISSUES
// ==========================

- NIDAQ digital input issue: Persisting from (at least) DAQmx 9.7.0
through latest 15.0.1: If acquire from 1 digital line CPU load is
very low, like 3% on my bench. If set 2 DI lines, jumps up to 6-7%.
By 4 DI lines I'm up to 30% CPU usage. These high loads occur only
if also acquiring from at least 1 AI channel. However, adding more
AI channels does not increase CPU usage at all. High load only if
using external clock. On Brian's bench (2X RAM) load is low up to
4 DI lines, but rises strongly as add DI lines. May be related to
mem usage in DAQmxReadDigitalLines which returns a byte per line
Reasons I use this are discussed @ CniAcqDmx::run().

// LOOSE ENDS
// ==========================

- Remote queries about dataFile objects are ill-advised or
(better?) forbidden.


// CHANNEL USAGE
// ==========================

- The niCumTypCnt counts are currently Nidaq-specific. Software should
migrate to super counts that include IMEC block. Also need real channel
layout map for filters and gain adjustments.


// GITHUB TODO
// ==========================

- Revisit all BK: notes.

- Need Matlab interface examples.

- Need structure docs.

- Document file formats and meta data.

- All docs must reflect updated system requirements:
    - RAM 4 GB minimum, 8+ GB preferred.
    - HD sustained write > 100 MB/s (SSD SATA 3 recommended).


// UI IMPROVEMENT
// ==========================

- FVW TODO:
    - Depiction of digital channels.
    - Odd/even channel color variation.
    - Select multiple graphs for close or other operation.
    - Need two MGraph panes to support imec + nidaq.
        - Use vert splitter.
        - Same 'seconds' span and controls for both...
        - Separate scan counters for diff srates...
        - Export range should be expressed as secs to link files.
    - First pass, just don't link files.
    - Need two datafile items...
    - Several things connected with nG (e.g. arrays) are stream
        specific so should be in a structure together with datafile.
    - Selection of current channel needs to be in only one stream
        at a time so toolbar makes sense, so deselect in other.

-GW TODO:
    - MGraphs get RHS marks for saving and AO.
    - Clicks for saving and AO.
    - Neural are tabbed banks of preset (configurable) count/content.
    - Aux get MScroll or tabs?
    - Graph config dialog for interactive layout.
    - Embedded or floating comb/shank map drawn from simple file
        syntax: header={nshank,nlinespershank,nchanperline}, then
        each channel is located by triplet.  Parallel to graphs,
        visual map shows multiple selections and navigates by clicks.
    - Save/restore screen layout.
    - MainApp::showSaveChecks will have to go.
    - Move RunToolbar ops acting on 'selected' into each viewer...
    - Main RunToolbar retains all-channel ops.
    - Imec !filter currently adds (AP+LF)...but superposition better.
    - Aux channels (maybe any analog) should get a dc-subtract spinner.
    - SNS loses graphs settings.

- IMEC TODO:
    - Two streams, four files {.nidq.bin, .nidq.meta, .imec.bin, .imec.meta}.
    - The two streams run in parallel at their own srates.
    - Imec can be run alone using software or hardware start, or get
        hardware start from nidaq (need to break D0 out from Whisper!).
    - Imec stream timepoints include {AP, LF, SY}.
    - Imec LFP channel 1/12 freq: interpolate by keeping lastInterp value,
        init to zero.
    - Each imec packet arrival is pc-timestamped ala niQ. Each imec
        sample gets interpolated pc-time. The pc-times are used to look
        up selected nidaq timepoints to copy for integration, if we decide
        to do that. Actually, since imec provides sync input this is less
        compelling.
    - No time stretching for either stream.
    - One graph fetcher -> 2 putScans.
    - Channel numbering specific to stream.
    - Need new stream/chan terminology to specify channel for {AO, trigger}.
    - In dual stream world lots of things need renaming
        'XXX' -> {niXXX, imXXX}, or,
        'XXX' -> {XXXbase, niXXX, imXXX}.
    - Twin stream minimum mods {DataFile, run, Reader, graphFetcher,
        putScans, Trig::Immed, Params, CfgDlg}.
        - DataFileIM underway, metedata incomplete, pending config dialog.
        - Run done.
        - Reader simulated version done,
        - Reader imec not implemented.
        - GraphFetcher done.
        - PutScans done (crude).
        - Trig mostly good {immed, timed, tcp} unadressed {spike, ttl}.
        - Params not implemented.
        - CfgDlg not implemented.
    - Remote fetching remains problematic without resampling.
    - CfgDlg gets first tab for imec (or more if needed).
    - CfgDlg imec and nidaq get 'Using' checkbox (at least one must be on).
    - CfgDlg Initialize block calls open, init. Alternatively, no
        need to validate until press Verify or OK.
    - 1st pass imec config GUI loads text tables instead of massive channel-
        by-channel tabes for gain and so on.
    - Individual channel settings (gains) best set during preview mode
        from graphsWindow.
    - If retain an app-startup settings verify, then add new messages into
        ConfigCtl::showStartupMessage(). Rather, on initial app startup
        there should be no settings checks. This should be deferred until
        visit ConfigCtl dialog. Then, there should be check for first time
        user with messagebox stating defaults will be used, and/or that
        required hardware are absent, and so on.
    - void opt3ElecOnChan( QVector<int> &E, int chan );
        : {Ejk} = chanj + k*384 such that Ejk < 960; j=[0,384)
    - void opt4ElecOnChan( QVector<int> &E, int chan );
        : {Ejk} = chanj + k*276 such that Ejk < 966; j=[0,384)
    - Perhaps give DataFile::isValid a stream id return value. (Do this
        after decide to break metadata).
    - Each stream meta should indicate which streams are active to enable
        automatic linking for FVW.
    - A meta file needs to carry which stream is this.
    - AO from imec stream needs resampling to connected clock.

- James Jun suggests in each neural downsampled bin what is plotted is
the binMax then binMin instead of just single winner. This may give better
representation of structure in the bin. So storage is double current value.
Possibly, double the bin-width to prevent doubling the storage. Not sure
this is actually desirable as it would tend to magnify apparent noise.

- Consider not just a command set for software but a script capability
to better handle timing among features/functions.

- References: (Diego really wants this sooner).
One other useful feature would be to add 'virtual' referencing.
This is to take a subset of channels, compute mean/median and use
that as a new reference. This helps a lot when you have movements
artifacts. I do that offline but having it online would be very helpful.
The simplest 'virtual reference' would be to take the median across all
channels and subtract that for each channel (for display purposes, the
data should be saved as it is). A more elaborate way is to create more
than 1 virtual reference that you apply to a selected group of electrodes.
One example is that if you have a probe with 4 shanks that are quite
separate, then you can do a virtual reference per shank and substract
each channel of a given shank with the corresponding virtual reference.
This can be useful for the IMEC probe since the probe will span many
brain regions in which the artifacts can vary substantially. However,
implementing already the virtual reference for all channels it would
be a significant improvement.

- Need easier to use chanMap editing tools.

- Maybe need Gain editor window with stored table and simple set-all
choices. Don't know what granularity gains need to be specified.

- Maybe have g/t index readout somewhere {statusbar, graphs?}.

- Command server and Rgt server might be in one dlg.

- Lee group asks for high visibility indicator of run status {Error,
Running, Saving, ...}. This may be place for g/t indicator, too.


// NEW FEATURES
// ==========================

- GateCtl gets more modes?

- GateCtl should provide option to put optional acq hardware resets on
gate lo-hi and hi-lo edges.

- Should allow configuring user digital-out on threshold crosses, like
evt saving modes with {aiChan, doChan, thresh, W, duration, indef}.

- Jeremy Cohen suggest two interesting trigger modes:
(1) Rate trigger (to detect activity periods w/ chronic implants) wherein
recording starts (perievtwindow) iff x-percent of given channel subset is
firing with rate > R.

(2) Ripple mode (sharp waves) wherein recording starts (perievtwindow)
iff x-percent of given channel subset is firing (not necessarily at a high
rate, but...) within a time window of width W.


// MISC NOTES
// ==========================

- Typical/high aux channel usage might be 6-12 analog in, 16 digital in.

- If single AIStream is too taxed for trigger, matlab, graphs, AO, ...
try dual streams and balance load.

- Use CniAcqDmx to monitor load. If nWhole count increasing beyond expected,
save restore states of {graph-pause, AO-enable}. This may help on systems
with fewer cores.

- Thread count is main load and best hardware is probably quad+ core.
As always, higher clock rate is better. Next issue is spooling data to
same disk as main OS activities. Better to have dedicated data drive.

- Nice test for cursor in window frame:
//    if( mywindow->frameGeometry().contains( QCursor::pos() )
//        && !mywindow->geometry().contains( QCursor::pos() ) ) {
//
//        // do something
//    }


