// RELEASE NOTES
// ==========================

20160404
--------
+ Reenable spike and TTL triggers.

20160401
--------
+ Imec support at v3.5 (ADC calibration).
+ Detect if USB NI device connected.
+ Multiple SpikeGLX can run but one owns NI.
+ Errors bring console window to top.
+ Config dialog gets disk space calculator.

20160305
--------
+ Fix timing issue with USB NI-DAQ.
+ Disable imec ref disconnection.
+ Flesh out SN field of imro table.
+ Add trigger stream selector.
+ Prelim work on spike trigger, still disabled.

20160304
--------
+ Imec support at v3.4 (faster startup, improved reference signal routing).
+ Fix run startup bug.
+ Fix DC subtraction bug.
+ Fix NI digital channel issue.
+ Message if set bank out of range.
+ Right-click to edit Imec settings.

20160302
--------
+ Correctly set Bank 0.
+ Start including SpikeGLX-MATLAB-SDK in release.

20160301
--------
+ Imec support.
+ Start releasing SpikeGLX.exe and SpikeGLX_NISIM.exe.
+ SpikeGLX folder requires "libNeuropix_basestation_api.dll".
+ Configuration dialog gets {Devices, IM Setup} Tabs.
+ Updated run pause/resume options moved from Triggers Tab to Gates Tab.
+ Data are processed in two parallel "streams": imec stream, nidq stream.
+ Each stream generates own datafiles {.imec.bin, .imec.meta} {.nidq.bin, .nidq.meta}.
+ Some renaming of metadata items to distinguish stream type.
+ Each stream gets own channel map and own save-channel string.
+ Each stream gets own GraphsWindow viewer pane.
+ All graphing uses pages of stacked traces.
+ New GraphsWindow Run Toolbar layout.
+ NI viewer gets low-pass filter option.
+ Matlab API modified to fetch from either imec or nidq stream.
+ Online help text rewritten.

Temporarily disabled:
- Spike trigger option.
- TTL trigger option.
- AO for Imec channels.
- Offline file viewer for Imec files.
- GraphsWindow save-channel checkboxes.

20160101
--------
- Introduces "multi-trace" MGraph class set and a revised FVW to use, test
and develop that. MGraph is a QGLWidget (or QOpenGLWidget) that draws
unlimited numbers of traces in a vertical stack arrangement. MGraph can
be child of any QWidget, or can be used as the viewport of an MScroll
(subclasses QAbstractScrollArea) as we are in FVW.
- Fix bug: SpikeGLX hangs on remote setTrgEnable command.
- Fix bug: Remote setRunName doesn't handle _g_t tags correctly.
- Data files now get double extension '.nidq.bin', '.nidq.meta'.
- Offline file viewer enabled.

20151231
--------
Function set very close to original SpikeGL. Major UI difference is disabled
fileViewerWindow (FVW) because the model of one GLGraph per channel creates
too many graphics objects. This version is effectively same as "prerelease"
versions distributed around Janelia and elsewhere.


// QT VERSIONS
// ==========================

SpikeGLX builds/runs successfully against following versions, with
noted issues. As of December 2015 all prereleases to Janelia and to
IMEC partner labs ship with 53MinGW to support XP.

- 5.3.2 MinGW482 32bit
    OpenGL:     QGLWidget
    HTML:       Renders pandoc.css properly
    Targets:    WinOS XP, 7, 8, 10
    Remarks:    - Low graph count (poor sharing).
                - Slow creation/resizing with QGLWidget requires GraphPool.
                - FileViewerWindow::initCloseLbl() issues following benign
                    warning as explained there:
                    "void QWindow::setTransientParent(QWindow*)
                     QWidgetWindow(0x431c048, name = "QWidgetClassWindow")
                     must be a top level window."

- 5.4.2 MinGW491 32bit
    OpenGL:     QGLWidget or QOpenGLWidget
    HTML:       Renders pandoc.css properly
    Targets:    WinOS XP*, 7, 8, 10
    Remarks:    - *QOpenGLWidget very fast but steps on XP Aero theme.
                - Works in XP if disallow Aero theme in Compatibility Settings.

- 5.5.1 MinGW492 32bit
    OpenGL:     QGLWidget or QOpenGLWidget
    HTML:       pandoc.css not rendering <pre><code> blocks properly**
    Targets:    WinOS XP*, 7, 8, 10
    Remarks:    - HTML CSS support degraded between version 5.4 and 5.5.
                - *QOpenGLWidget very fast but steps on XP Aero theme.
                - Works in XP if disallow Aero theme in Compatibility Settings.

- 5.6.0 Beta {MinGW492 32bit, MSVC2014 32bit, MSVC2014 64bit}
    OpenGL:     QGLWidget or QOpenGLWidget
    HTML:       pandoc.css not rendering <pre><code> blocks properly**
    Targets:    WinOS 7, 8, 10
    Remarks:    - HTML CSS support degraded between version 5.4 and 5.5.
                - XP not supported.
                - Get benign startup warning issuing before main():
                    "qt.qpa.gl: Unable to disable rotation."
                - Get warning on closing FVW (not yet resolved):
                    "External WM_DESTROY received for
                    QWidgetWindow(0x4b954c40, name="ExportDialogWindow"),
                    parent:  QWindow(0x0), transient parent:
                    QWidgetWindow(0x4b9549a0, name="FileViewerWindowClassWindow")"
                - 12/28/2015: Not yet built 64-bit against NI-DAQ.

// **
// BK: Suspicious change here:
// C:\Qt\5.3\Src\qtwebkit\Source\WebCore\rendering\...
// ...RenderBlockLineLayout.cpp::CheckMidpoints() ; line 426


// ISSUES
// ==========================

- NIDAQ digital input issue: Persisting from (at least) DAQmx 9.7.0
through latest 15.0.1: If acquire from 1 digital line CPU load is
very low, like 3% on my bench. If set 2 DI lines, jumps up to 6-7%.
By 4 DI lines I'm up to 30% CPU usage. These high loads occur only
if also acquiring from at least 1 AI channel. However, adding more
AI channels does not increase CPU usage at all. High load only if
using external clock. On Brian's bench (2X RAM) load is low up to
4 DI lines, but rises strongly as add DI lines. May be related to
mem usage in DAQmxReadDigitalLines which returns a byte per line
Reasons I use this are discussed @ CniAcqDmx::run().

- I use pandoc to translate markdown to html help text. I use:
    > pandoc --self-contained -s- c pandoc.css ...
which directly encodes css and img src data into tags like this:
    <link href="data:text/css;charset=utf-8,...thedata..."
The problem is that the html parser used in QTextBrowser does not
understand refs that directly encode data without a filename, so when
running under the Creator environment the Application Output pane logs:
    "QFSFileEngine::open: No file name specified"
for each embedded encoding.


// LOOSE ENDS
// ==========================

- Remote queries about dataFile objects are ill-advised or
(better?) forbidden.


// GITHUB TODO
// ==========================

- Revisit all BK: notes.

- Need structure docs.

- Document file formats and meta data.

- All docs must reflect updated system requirements:
    - RAM 4 GB minimum, 8+ GB preferred.
    - HD sustained write > 200 MB/s (SSD SATA 3 recommended).

- Notes on sustained write speeds:
    - Seagate barracuda 7200.11 (1.5TB) 120MB/s
    - WD 1600 AAJS 93.5 MB/s
    - SanDisk Extreme Pro SSD (240BG) 520MB/s

// UI IMPROVEMENT
// ==========================

- FVW TODO:
    - Need renderer for digital channels.
    - Select multiple graphs for close or other operation.
    - Need two MGraph panes to support imec + nidaq.
        - Use vert splitter.
        - Same 'seconds' span and controls for both...
        - Separate scan counters for diff srates...
        - Export range should be expressed as secs to link files.
    - First pass, just don't link files.
    - Need two datafile members...
    - Several things connected with nG (e.g. arrays) are stream
        specific so should be in a structure together with datafile.

-GW TODO:
    - MGraphs get RHS marks for saving and AO.
    - Clicks for saving channels and AO.
    - Need renderer for digital channels.
    - Embedded or floating comb/shank map drawn from simple file
        syntax: header={nshank,nlinespershank,nchanperline}, then
        each channel is located by triplet.  Parallel to graphs,
        visual map shows multiple selections and navigates by clicks.
    - Save/restore screen layout.
    - Imec !filter currently adds (AP+LF)...but superposition better.
    - Add more panels.

- IMEC TODO:
    - Imec can be run alone using software or hardware start, or get
        hardware start from nidaq (need to break D0 out from Whisper!).
    - Need new stream/chan terminology to specify channel for AO.
    - AO from imec stream needs resampling to connected clock.
    - BIST dialog.

- James Jun suggests in each neural downsampled bin what is plotted is
the binMax then binMin instead of just single winner. This may give better
representation of structure in the bin. So storage is double current value.
Possibly, double the bin-width to prevent doubling the storage. Not sure
this is actually desirable as it would tend to magnify apparent noise.

- Consider not just a command set for software but a script capability
to better handle timing among features/functions.

- References: (Diego really wants this sooner).
One other useful feature would be to add 'virtual' referencing.
This is to take a subset of channels, compute mean/median and use
that as a new reference. This helps a lot when you have movements
artifacts. I do that offline but having it online would be very helpful.
The simplest 'virtual reference' would be to take the median across all
channels and subtract that for each channel (for display purposes, the
data should be saved as it is). A more elaborate way is to create more
than 1 virtual reference that you apply to a selected group of electrodes.
One example is that if you have a probe with 4 shanks that are quite
separate, then you can do a virtual reference per shank and substract
each channel of a given shank with the corresponding virtual reference.
This can be useful for the IMEC probe since the probe will span many
brain regions in which the artifacts can vary substantially. However,
implementing already the virtual reference for all channels it would
be a significant improvement.

- Need easier to use chanMap editing tools.

- Maybe have g/t index readout somewhere {statusbar, graphs?}.

- Command server and Rgt server might be in one dlg.

- Lee group asks for high visibility indicator of run status {Error,
Running, Saving, ...}. This may be place for g/t indicator, too.


// NEW FEATURES
// ==========================

- GateCtl gets more modes?

- GateCtl should provide option to put optional acq hardware resets on
gate lo-hi and hi-lo edges.

- Should allow configuring user digital-out on threshold crosses, like
evt saving modes with {aiChan, doChan, thresh, W, duration, indef}.

- Jeremy Cohen suggest two interesting trigger modes:
(1) Rate trigger (to detect activity periods w/ chronic implants) wherein
recording starts (perievtwindow) iff x-percent of given channel subset is
firing with rate > R.

(2) Ripple mode (sharp waves) wherein recording starts (perievtwindow)
iff x-percent of given channel subset is firing (not necessarily at a high
rate, but...) within a time window of width W.


// MISC NOTES
// ==========================

- Typical/high aux channel usage might be 6-12 analog in, 16 digital in.

- Use CniAcqDmx to monitor load. If nWhole count increasing beyond expected,
save restore states of {graph-pause, AO-enable}. This may help on systems
with fewer cores.

- Thread count is main load and best hardware is probably quad+ core.
As always, higher clock rate is better. Next issue is spooling data to
same disk as main OS activities. Better to have dedicated data drive.

- Nice test for cursor in window frame:
//    if( mywindow->frameGeometry().contains( QCursor::pos() )
//        && !mywindow->geometry().contains( QCursor::pos() ) ) {
//
//        // do something
//    }


